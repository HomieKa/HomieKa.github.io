import React, { useState, useEffect } from 'react';
import { 
  Download, 
  MessageCircle, 
  Truck, 
  Edit2, 
  CheckCircle2, 
  AlertCircle, 
  XCircle, 
  RotateCcw 
} from 'lucide-react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';

// Status color and icon mapping
const STATUS_CONFIG = {
  'In Transit': { color: 'text-blue-600', icon: Truck },
  'Delayed': { color: 'text-yellow-600', icon: AlertCircle },
  'Delivered': { color: 'text-green-600', icon: CheckCircle2 },
  'Returned': { color: 'text-orange-600', icon: RotateCcw },
  'Lost': { color: 'text-red-600', icon: XCircle }
};

const ShipmentTrackingDashboard = () => {
  const [shipments, setShipments] = useState([
    {
      id: 'CN123456789',
      carrier: 'FastTrack Logistics',
      dispatchDate: '2024-03-15',
      eta: '2024-03-18',
      status: 'In Transit',
      completed: false,
      trackingUrl: 'https://example.com/tracking/CN123456789',
      comments: [
        {
          id: 1,
          type: 'public',
          text: 'Shipment picked up from sender',
          timestamp: new Date().toISOString()
        }
      ]
    }
  ]);

  const [selectedShipment, setSelectedShipment] = useState(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [newComment, setNewComment] = useState('');
  const [commentType, setCommentType] = useState('public');

  const handleExportToExcel = () => {
    // In a real-world scenario, this would call a backend endpoint
    alert('Export to Excel functionality to be implemented');
  };

  const openShipmentDetails = (shipment) => {
    setSelectedShipment(shipment);
    setIsModalOpen(true);
  };

  const addComment = () => {
    if (!newComment.trim()) return;

    const updatedShipments = shipments.map(shipment => {
      if (shipment.id === selectedShipment.id) {
        return {
          ...shipment,
          comments: [
            ...shipment.comments,
            {
              id: shipment.comments.length + 1,
              type: commentType,
              text: newComment,
              timestamp: new Date().toISOString()
            }
          ]
        };
      }
      return shipment;
    });

    setShipments(updatedShipments);
    setSelectedShipment(updatedShipments.find(s => s.id === selectedShipment.id));
    setNewComment('');
  };

  const updateShipmentStatus = (status, completed) => {
    const updatedShipments = shipments.map(shipment => {
      if (shipment.id === selectedShipment.id) {
        return {
          ...shipment,
          status,
          completed: completed === 'Y'
        };
      }
      return shipment;
    });

    setShipments(updatedShipments);
    setSelectedShipment(updatedShipments.find(s => s.id === selectedShipment.id));
  };

  return (
    <div className="container mx-auto p-6 bg-gray-50">
      <Card className="w-full">
        <CardHeader className="flex flex-row items-center justify-between">
          <CardTitle className="text-2xl">Shipment Tracking Dashboard</CardTitle>
          <Button 
            variant="outline" 
            onClick={handleExportToExcel} 
            className="flex items-center gap-2"
          >
            <Download size={18} /> Export to Excel
          </Button>
        </CardHeader>
        <CardContent>
          <div className="overflow-x-auto">
            <table className="w-full border-collapse">
              <thead className="bg-blue-50">
                <tr>
                  {['Connote', 'Carrier', 'Dispatch Date', 'ETA', 'Status', 'Completed', 'Actions'].map(header => (
                    <th key={header} className="p-3 text-left font-semibold text-gray-700 border-b">
                      {header}
                    </th>
                  ))}
                </tr>
              </thead>
              <tbody>
                {shipments.map(shipment => {
                  const StatusIcon = STATUS_CONFIG[shipment.status]?.icon || Truck;
                  const statusColor = STATUS_CONFIG[shipment.status]?.color || 'text-gray-600';

                  return (
                    <tr key={shipment.id} className="hover:bg-gray-100 transition-colors">
                      <td className="p-3 border-b">{shipment.id}</td>
                      <td className="p-3 border-b">{shipment.carrier}</td>
                      <td className="p-3 border-b">{shipment.dispatchDate}</td>
                      <td className="p-3 border-b">{shipment.eta}</td>
                      <td className="p-3 border-b">
                        <div className="flex items-center gap-2">
                          <StatusIcon size={18} className={statusColor} />
                          <span className={statusColor}>{shipment.status}</span>
                        </div>
                      </td>
                      <td className="p-3 border-b">
                        {shipment.completed ? 'Yes' : 'No'}
                      </td>
                      <td className="p-3 border-b">
                        <Button 
                          variant="outline" 
                          size="sm" 
                          onClick={() => openShipmentDetails(shipment)}
                        >
                          Details
                        </Button>
                      </td>
                    </tr>
                  );
                })}
              </tbody>
            </table>
          </div>
        </CardContent>
      </Card>

      {selectedShipment && (
        <Dialog open={isModalOpen} onOpenChange={setIsModalOpen}>
          <DialogContent className="max-w-4xl">
            <DialogHeader>
              <DialogTitle>Shipment Details: {selectedShipment.id}</DialogTitle>
              <DialogDescription>
                Manage and track the shipment status and comments
              </DialogDescription>
            </DialogHeader>

            {/* Shipment Details Section */}
            <div className="grid grid-cols-2 gap-4 mb-6">
              <div>
                <label className="block font-semibold mb-2">Carrier</label>
                <p>{selectedShipment.carrier}</p>
              </div>
              <div>
                <label className="block font-semibold mb-2">Tracking Link</label>
                <a 
                  href={selectedShipment.trackingUrl} 
                  target="_blank" 
                  rel="noopener noreferrer" 
                  className="text-blue-600 hover:underline"
                >
                  View Tracking Details
                </a>
              </div>
            </div>

            {/* Status Update Section */}
            <div className="mb-6">
              <h3 className="text-lg font-semibold mb-3">Update Shipment Status</h3>
              <div className="grid grid-cols-2 gap-4">
                <Select 
                  value={selectedShipment.status}
                  onValueChange={(value) => updateShipmentStatus(value, selectedShipment.completed ? 'Y' : 'N')}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select Status" />
                  </SelectTrigger>
                  <SelectContent>
                    {Object.keys(STATUS_CONFIG).map(status => (
                      <SelectItem key={status} value={status}>{status}</SelectItem>
                    ))}
                  </SelectContent>
                </Select>

                <Select 
                  value={selectedShipment.completed ? 'Y' : 'N'}
                  onValueChange={(value) => updateShipmentStatus(selectedShipment.status, value)}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Completed" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="N">Not Completed</SelectItem>
                    <SelectItem value="Y">Completed</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>

            {/* Comments Section */}
            <div>
              <h3 className="text-lg font-semibold mb-3">Comments</h3>
              <div className="max-h-48 overflow-y-auto mb-4 space-y-2">
                {selectedShipment.comments.map(comment => (
                  <div 
                    key={comment.id} 
                    className={`p-3 rounded ${
                      comment.type === 'private' 
                        ? 'bg-red-50 border-l-4 border-red-500' 
                        : 'bg-blue-50 border-l-4 border-blue-500'
                    }`}
                  >
                    <div className="flex justify-between items-center mb-2">
                      <span className="font-medium">
                        {comment.type === 'private' ? 'Private' : 'Public'} Comment
                      </span>
                      <span className="text-xs text-gray-500">
                        {new Date(comment.timestamp).toLocaleString()}
                      </span>
                    </div>
                    <p>{comment.text}</p>
                  </div>
                ))}
              </div>

              <div className="grid grid-cols-2 gap-4">
                <Select value={commentType} onValueChange={setCommentType}>
                  <SelectTrigger>
                    <SelectValue placeholder="Comment Type" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="public">Public Comment</SelectItem>
                    <SelectItem value="private">Private Comment</SelectItem>
                  </SelectContent>
                </Select>

                <Textarea 
                  placeholder="Enter your comment" 
                  value={newComment}
                  onChange={(e) => setNewComment(e.target.value)}
                />
              </div>
              <Button 
                className="mt-2" 
                onClick={addComment}
                disabled={!newComment.trim()}
              >
                <MessageCircle className="mr-2" /> Add Comment
              </Button>
            </div>
          </DialogContent>
        </Dialog>
      )}
    </div>
  );
};

export default ShipmentTrackingDashboard;
